trigger: none

variables:
  system.debug: 'true'

pool:
  vmImage: 'ubuntu-latest'

stages:

- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: '18.x'
    - script: |
        echo "Starting npm clean install"
        npm ci              # npm ci stands for npm clean-install
        echo "Starting npm run build"
        npm run build       # npm run build creates a build directory with a production build of your app.
        # for service managed deployments
        echo "Starting npx cdk bootstrap" 
        # You can bootstrap an environment by obtaining and deploying the bootstrap AWS CloudFormation template. ( je kan ook gewoon cdk bootstrap doen )
        # To get a copy of this template in the file bootstrap-template.yaml, run the following command:
        #npx cdk bootstrap --show-template > bootstrap_template/bootstrap-template.yaml # /home/vsts/work/_temp/6b9b7cab-aeaf-4abb-a3ec-ed5075dc9134.sh: line 7: bootstrap_template/bootstrap-template.yaml: No such file or directory
        npx cdk bootstrap --show-template > bootstrap-template.yaml
        pwd 
        ls -l 

        # also available in https://github.com/aws/aws-cdk/blob/main/packages/aws-cdk/lib/api/bootstrap/bootstrap-template.yaml
        echo "Starting npx cdk synth shadow"
        npx cdk synth --output='cdk.out-shadow' -c environment=shadow
        echo "Starting npx cdk synth prod"
        npx cdk synth -c environment=production
      displayName: 'npm install and build'
    - publish: $(System.DefaultWorkingDirectory)/cdk.out-shadow
      artifact: cdk.out-shadow
    - publish: $(System.DefaultWorkingDirectory)/cdk.out
      artifact: cdk.out
    # - publish: $(System.DefaultWorkingDirectory)/src/bootstrap-template
    #   artifact: bootstrap-template # ##[error]Path does not exist: /home/vsts/work/1/s/src/bootstrap-template
    - publish: $(System.DefaultWorkingDirectory)/bootstrap-template.yaml
      artifact: bootstrap-template # ##[error]Path does not exist: /home/vsts/work/1/s/src/bootstrap-template
      
- stage: Staging
  displayName: Deploy to shadow environment
  dependsOn: Build
  jobs:
  - deployment: Deploy
    environment: RobRoosCdkLandingZoneStaging
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: cdk.out-shadow
                path: '$(System.DefaultWorkingDirectory)/cdk.out-shadow'
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: bootstrap-template
                path: '$(System.DefaultWorkingDirectory)/bootstrap-template'
            # - task: AWSShellScript@1
            #   displayName: Bootstrap management account
            #   inputs:
            #     awsCredentials: ns-automation-shadow-LZCDKBootstrapUser
            #     regionName: 'eu-west-1'
            #     scriptType: 'inline'
            #     inlineScript: |
            #       npx cdk bootstrap --template bootstrap-template/bootstrap-template.yaml aws://038337687866/eu-west-1 --bootstrap-kms-key-id '' -t ApplicationServiceID=ASID0001709 -t map-migrated=d-server-00tl810rxa1dds
            #       npx cdk bootstrap --template bootstrap-template/bootstrap-template.yaml aws://038337687866/eu-central-1 --bootstrap-kms-key-id '' -t ApplicationServiceID=ASID0001709 -t map-migrated=d-server-00tl810rxa1dds
            #       npx cdk bootstrap --template bootstrap-template/bootstrap-template.yaml aws://038337687866/us-east-1 --bootstrap-kms-key-id '' -t ApplicationServiceID=ASID0001709 -t map-migrated=d-server-00tl810rxa1dds
            - task: AWSShellScript@1
              displayName: CDK deploy in management account
              inputs:
                awsCredentials: my-aws-account-cdk-2-accounts-cdk-s3-ts # ns-automation-shadow-LZCDKDeployUser
                regionName: 'us-east-1'
                scriptType: 'inline'
                inlineScript: |
                  npx cdk deploy --app 'cdk.out-shadow/' --require-approval never --all

# - task: AWSCLI@1
#   inputs:
#     awsCredentials: my-aws-account-cdk-2-accounts # 'ADO-test-this-account' # 'my-aws-account-cdk-2-accounts' # shared from serv.conn: 'my-aws-account' # iam user azuredevops in master account
#     regionName: 'us-east-1'
#     awsCommand: 'sts'
#     awsSubCommand: 'get-caller-identity'
#   displayName: 'aws sts test3'
# gives:
#   {
#     "UserId": "AIDA6DPCBMLV4PVAYJWRP",
#     "Account": "969526043371",
#     "Arn": "arn:aws:iam::969526043371:user/azuredevops"
# }


# - task: AWSShellScript@1
#   inputs:
#     awsCredentials: 'my-aws-account-cdk-2-accounts'
#     regionName: 'us-east-1'
#     scriptType: 'inline'
#     inlineScript: |
#       echo "Running cdk ls"
#       cdk ls
#   displayName: 'list cdk ls'

# - task: AWSShellScript@1
#   inputs:
#     awsCredentials: 'AWS-SANDBOX'
#     regionName: 'eu-central-1'
#     scriptType: 'inline'
#     inlineScript: |
#       echo "Running validations"
#       cdk synth -o out
#       cd out
#       fname=$(find *.template.json)
#       echo "Testing output with cfn-nag-scan"
#       cfn_nag_scan --input-path $fname
#   displayName: 'Validating with cfn_nag'

# - task: AWSCLI@1
#   inputs:
#     awsCredentials: 'AWS-SANDBOX'
#     regionName: 'eu-central-1'
#     awsCommand: 'cloudformation'
#     awsSubCommand: 'list-stacks'
#   displayName: 'aws cli list cfn stacks'

# - task: AWSShellScript@1
#   inputs:
#     awsCredentials: 'IAM-azuredevops-user'
#     #awsCredentials: 'AWS-SANDBOX'
#     regionName: 'eu-central-1'
#     scriptType: 'inline'
#     inlineScript: 'aws s3 ls'
#     # disableAutoCwd: true
#     # workingDirectory: '$(System.DefaultWorkingDirectory)'
#     # failOnStandardError: false
#   displayName: 'aws s3 ls'


# - task: AWSShellScript@1
#   inputs:
#     awsCredentials: 'AWS-SANDBOX'
#     regionName: 'eu-central-1'
#     scriptType: 'inline'
#     inlineScript: |
#       echo "cdk synth to generate cdk.out dir"
#       cdk synth
#   displayName: 'cdk synthesize'

# - task: AWSShellScript@1
#   inputs:
#     awsCredentials: 'AWS-SANDBOX'
#     regionName: 'eu-central-1'
#     scriptType: 'inline'
#     inlineScript: |
#       echo "cdk diff without arguments"
#       cdk diff
#       echo "Generating CDK diff file"
#       cdk diff -o out -c aws-cdk:enableDiffNoFail=true --no-color "*" 2>&1 | sed -n '/Resources/,/Outputs/p' | sed 's/├/\+/g; s/│/|/g; s/─/-/g; s/└/`/g' | head -n -1 | tee output.log
#       sed -i '1 i\```bash' output.log
#       sed -i -e '$a```' output.log
#       cat output.log
#   displayName: 'Generating CDK diff file'


# - task: PublishPipelineArtifact@1
#   inputs:
#     targetPath: $(System.DefaultWorkingDirectory)
#     artifactName: cdk-arti

# # onderstaan werkt enkel met een PR of issue.
# # GitHub Comment v0   https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/github-comment-v0?view=azure-pipelines
# # via https://dev.azure.com/1robroos/SNS-SQS/_settings/boards-external-integration
# # Write a comment to your GitHub entity i.e. issue or a pull request (PR).
# - task: GitHubComment@0
#   inputs:
#     gitHubConnection: github-rob-personal # string. Required. GitHub connection (OAuth or PAT). 
#     repositoryName: '$(Build.Repository.Name)' # string. Required. Repository. Default: $(Build.Repository.Name).
#     #id: # string. ID of the github pr/issue. 
#     comment: "Refer to output.log" # string. Comment.



